Description,Target,Expression
#,,
local,_DF_IS_TOUR,'tour_type' in df.columns
,number_of_participants,df.number_of_participants if _DF_IS_TOUR else 1
,is_joint,(df.tour_category=='joint') if _DF_IS_TOUR else False
#,,
 local,_HAVE_PARENT_TOURS,'parent_tour_id' in df.columns
,_parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id) if _HAVE_PARENT_TOURS else ''"
,work_tour_is_drive,"_parent_tour_mode.isin(['DRIVEALONEFREE','DRIVEALONEPAY'])"
,work_tour_is_bike,_parent_tour_mode=='BIKE'
,work_tour_is_SOV,"_parent_tour_mode.isin(['DRIVEALONEFREE','DRIVEALONEPAY'])"
#,,
,is_mandatory,(df.tour_category=='mandatory') if 'tour_category' in df.columns else False
,is_joint,(df.tour_category=='joint') if 'tour_category' in df.columns else False
,is_indiv,~is_joint
,is_atwork_subtour,(df.tour_category=='atwork') if 'tour_category' in df.columns else False
,is_escort,(df.tour_type == 'escort') if _DF_IS_TOUR else False
# FIXME why inverse of value of time? need better name?,,
#,c_cost,(0.60 * c_ivt) / df.value_of_time
# ivot * (c_ivt_cost_multiplier * c_ivt)
,ivot,1.0 / df.value_of_time
#,,
,dest_topology,"reindex(land_use.TOPOLOGY, df[dest_col_name])"
,terminal_time,"reindex(land_use.TERMINAL, df[dest_col_name])"
,dest_density_index,"reindex(land_use.density_index, df[dest_col_name])"
# FIXME no transit subzones so all zones short walk to transit,,
,_walk_transit_origin,True
,_walk_transit_destination,True
,walk_transit_available,_walk_transit_origin & _walk_transit_destination
,drive_transit_available,_walk_transit_destination & (df.auto_ownership > 0)
,origin_walk_time,shortWalk*60/walkSpeed
,destination_walk_time,shortWalk*60/walkSpeed
# RIDEHAIL,,
# ,, Note that the mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from
,origTaxiWaitTime,"odt_skims['RH_SOLO_WAIT'] * (1.0 - odt_skims['RH_SOLO_REJECTIONPROB']) + TNC_missed_trip_penalty * odt_skims['RH_SOLO_REJECTIONPROB']"
,destTaxiWaitTime,"dot_skims['RH_SOLO_WAIT'] * (1.0 - dot_skims['RH_SOLO_REJECTIONPROB']) + TNC_missed_trip_penalty * dot_skims['RH_SOLO_REJECTIONPROB']"
,origSingleTNCWaitTime,"odt_skims['RH_SOLO_WAIT'] * (1.0 - odt_skims['RH_SOLO_REJECTIONPROB']) + TNC_missed_trip_penalty * odt_skims['RH_SOLO_REJECTIONPROB']"
,destSingleTNCWaitTime,"dot_skims['RH_SOLO_WAIT'] * (1.0 - dot_skims['RH_SOLO_REJECTIONPROB']) + TNC_missed_trip_penalty * dot_skims['RH_SOLO_REJECTIONPROB']"
,origSharedTNCWaitTime,"odt_skims['RH_POOLED_WAIT'] * (1.0 - odt_skims['RH_POOLED_REJECTIONPROB']) + TNC_missed_trip_penalty * odt_skims['RH_POOLED_REJECTIONPROB']"
,destSharedTNCWaitTime,"dot_skims['RH_POOLED_WAIT'] * (1.0 - dot_skims['RH_POOLED_REJECTIONPROB']) + TNC_missed_trip_penalty * dot_skims['RH_POOLED_REJECTIONPROB']"
,totalWaitTaxi,origTaxiWaitTime + destTaxiWaitTime
,totalWaitSingleTNC,origSingleTNCWaitTime + destSingleTNCWaitTime
,totalWaitSharedTNC,origSharedTNCWaitTime + destSharedTNCWaitTime
#,,
,_free_parking_available,(df.tour_type == 'work') & df.free_parking_at_work if _DF_IS_TOUR else False
,_dest_hourly_peak_parking_cost,"reindex(land_use.PRKCST, df[dest_col_name])"
,_dest_hourly_offpeak_parking_cost,"reindex(land_use.OPRKCST, df[dest_col_name])"
,_hourly_peak_parking_cost,"np.where(_free_parking_available, 0, _dest_hourly_peak_parking_cost)"
,_hourly_offpeak_parking_cost,"np.where(_free_parking_available, 0, _dest_hourly_offpeak_parking_cost)"
,daily_parking_cost,"np.where(is_mandatory, _hourly_peak_parking_cost * df.duration, _hourly_offpeak_parking_cost * df.duration)"
#,,
,distance,od_skims['DIST']
,sov_available,(odt_skims['SOV_TIME']>0) & (dot_skims['SOV_TIME']>0)
,sovtoll_available,(odt_skims['SOVTOLL_VTOLL']>0) | (dot_skims['SOVTOLL_VTOLL']>0)
,hov2_available,(odt_skims['HOV2_TIME'] + dot_skims['HOV2_TIME'])>0
,hov2toll_available,(odt_skims['HOV2TOLL_VTOLL'] + dot_skims['HOV2TOLL_VTOLL'])>0
,hov3_available,(odt_skims['HOV3_TIME']>0) & (dot_skims['HOV3_TIME']>0)
,hov3toll_available,(odt_skims['HOV3TOLL_VTOLL'] + dot_skims['HOV3TOLL_VTOLL'])>0
,walk_local_available,walk_transit_available & (odt_skims['WLK_LOC_WLK_TOTIVT']/100>0) & (dot_skims['WLK_LOC_WLK_TOTIVT']/100>0)
,walk_commuter_available,walk_transit_available & (odt_skims['WLK_COM_WLK_TOTIVT']/100>0) & (dot_skims['WLK_COM_WLK_TOTIVT']/100>0) & ((odt_skims['WLK_COM_WLK_KEYIVT']/100 + dot_skims['WLK_COM_WLK_KEYIVT']/100)>0)
,walk_express_available,walk_transit_available & (odt_skims['WLK_EXP_WLK_TOTIVT']/100>0) & (dot_skims['WLK_EXP_WLK_TOTIVT']/100>0) & ((odt_skims['WLK_EXP_WLK_KEYIVT']/100 + dot_skims['WLK_EXP_WLK_KEYIVT']/100)>0)
,walk_heavyrail_available,walk_transit_available & (odt_skims['WLK_HVY_WLK_TOTIVT']/100>0) & (dot_skims['WLK_HVY_WLK_TOTIVT']/100>0) & ((odt_skims['WLK_HVY_WLK_KEYIVT']/100 + dot_skims['WLK_HVY_WLK_KEYIVT']/100)>0)
,walk_lrf_available,walk_transit_available & (odt_skims['WLK_LRF_WLK_TOTIVT']/100>0) & (dot_skims['WLK_LRF_WLK_TOTIVT']/100>0) & ((odt_skims['WLK_LRF_WLK_KEYIVT']/100 + dot_skims['WLK_LRF_WLK_KEYIVT']/100)>0)
,walk_ferry_available,walk_lrf_available & ((odt_skims['WLK_LRF_WLK_FERRYIVT']/100 + dot_skims['WLK_LRF_WLK_FERRYIVT']/100)>0)
,drive_local_available,drive_transit_available & (odt_skims['DRV_LOC_WLK_TOTIVT']/100>0) & (dot_skims['WLK_LOC_DRV_TOTIVT']/100>0)
,drive_commuter_available,drive_transit_available & (odt_skims['DRV_COM_WLK_TOTIVT']/100>0) & (dot_skims['WLK_COM_DRV_TOTIVT']/100>0) & ((odt_skims['DRV_COM_WLK_KEYIVT']/100 + dot_skims['WLK_COM_DRV_KEYIVT']/100)>0)
,drive_express_available,drive_transit_available & (odt_skims['DRV_EXP_WLK_TOTIVT']/100>0) & (dot_skims['WLK_EXP_DRV_TOTIVT']/100>0) & ((odt_skims['DRV_EXP_WLK_KEYIVT']/100 + dot_skims['WLK_EXP_DRV_KEYIVT']/100)>0)
,drive_heavyrail_available,drive_transit_available & (odt_skims['DRV_HVY_WLK_TOTIVT']/100>0) & (dot_skims['WLK_HVY_DRV_TOTIVT']/100>0) & ((odt_skims['DRV_HVY_WLK_KEYIVT']/100 + dot_skims['WLK_HVY_DRV_KEYIVT']/100)>0)
,drive_lrf_available,drive_transit_available & (odt_skims['DRV_LRF_WLK_TOTIVT']/100>0) & (dot_skims['WLK_LRF_DRV_TOTIVT']/100>0) & ((odt_skims['DRV_LRF_WLK_KEYIVT']/100 + dot_skims['WLK_LRF_DRV_KEYIVT']/100)>0)
,drive_ferry_available,drive_lrf_available & ((odt_skims['DRV_LRF_WLK_FERRYIVT']/100 + dot_skims['WLK_LRF_WLK_FERRYIVT']/100)>0)
#,,
destination in central business district,destination_in_cbd,"(reindex(land_use.area_type, df[dest_col_name]) < setting('cbd_threshold')) * 1"
#,,FIXME diagnostic
#,sov_dist_rt,(odt_skims['SOV_DIST'] + dot_skims['SOV_DIST'])
,is_dest_cordon, df[dest_col_name].isin(LIST_SMALL_CORDON_TAZS_SF)
,is_dest_orig_cordon, ((df[orig_col_name].isin(LIST_SMALL_CORDON_TAZS_SF)) | (df[dest_col_name].isin(LIST_SMALL_CORDON_TAZS_SF)))
,is_income_very_low, (((df.income_in_thousands>0)  & (df.income_in_thousands<=46)  & (df.hhsize == 1)) | ((df.income_in_thousands>46)  & (df.income_in_thousands<=53)  & (df.hhsize == 2)) | ((df.income_in_thousands>53)  & (df.income_in_thousands<=59)  & (df.hhsize == 3)) | ((df.income_in_thousands>59)  & (df.income_in_thousands<=65)  & (df.hhsize == 4)))
,is_income_low,      (((df.income_in_thousands>0)  & (df.income_in_thousands<=66)  & (df.hhsize == 1)) | ((df.income_in_thousands>66)  & (df.income_in_thousands<=76)  & (df.hhsize == 2)) | ((df.income_in_thousands>76)  & (df.income_in_thousands<=85)  & (df.hhsize == 3)) | ((df.income_in_thousands>85)  & (df.income_in_thousands<=95)  & (df.hhsize == 4)))
,is_income_moderate, (((df.income_in_thousands>0)  & (df.income_in_thousands<=100) & (df.hhsize == 1)) | ((df.income_in_thousands>100) & (df.income_in_thousands<=114) & (df.hhsize == 2)) | ((df.income_in_thousands>114) & (df.income_in_thousands<=128) & (df.hhsize == 3)) | ((df.income_in_thousands>128) & (df.income_in_thousands<=142) & (df.hhsize == 4)))
,is_income_medium,   (((df.income_in_thousands>0)  & (df.income_in_thousands<=116) & (df.hhsize == 1)) | ((df.income_in_thousands>116) & (df.income_in_thousands<=133) & (df.hhsize == 2)) | ((df.income_in_thousands>133) & (df.income_in_thousands<=149) & (df.hhsize == 3)) | ((df.income_in_thousands>149) & (df.income_in_thousands<=166) & (df.hhsize == 4)))
,is_income_high,     (((df.income_in_thousands>116)                                & (df.hhsize == 1)) | ((df.income_in_thousands>133)                                 & (df.hhsize == 2)) | ((df.income_in_thousands>149)                                 & (df.hhsize == 3)) | ((df.income_in_thousands>166)                                 & (df.hhsize == 4)))
,is_peak, (((((df.start>=6)  & (df.start<=9)) | ((df.start>=15)  & (df.start<=18) )) & (df[dest_col_name].isin(LIST_SMALL_CORDON_TAZS_SF))) | ((((df.end>=6)  & (df.end<9)) | ((df.end>=15)  & (df.end<=18) )) & (df[orig_col_name].isin(LIST_SMALL_CORDON_TAZS_SF))))  if _DF_IS_TOUR else 1

